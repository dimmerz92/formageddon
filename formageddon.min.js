const Formageddon=(()=>{"use strict";const t=new WeakSet,e=["INPUT","TEXTAREA","SELECT"],a=["accept","min","max","step","minlength","maxlength","pattern","required"],n={valueMissing:{attr:"data-required-err",default:"This field is required."},typeMismatch:{attr:"data-type-err",default:"The value is not the correct type."},patternMismatch:{attr:"data-pattern-err",default:"The value does not match the required pattern."},tooLong:{attr:"data-maxlength-err",default:"The value is too long."},tooShort:{attr:"data-minlength-err",default:"The value is too short."},rangeOverflow:{attr:"data-max-err",default:"The value is too large."},rangeUnderflow:{attr:"data-min-err",default:"The value is too small."},stepMismatch:{attr:"data-step-err",default:"The value does not match the step interval."},badInput:{attr:"data-type-err",default:"The input value is invalid."}};function r(t){const e=t.getAttribute("data-confirm");if(!e)return!0;const a=document.querySelector(e);return a?t.value===a.value:(console.warn(`element not found for data-confirm=${e}`),!1)}function i(t){const e=t.getAttribute("aria-describedby");if(!e)return null;const a=document.getElementById(e);return a||console.warn(`element not found for aria-describedby="${e}"`),a}function o(t){t.setAttribute("aria-invalid","true");const e=i(t);e&&(e.classList.add("invalid"),e.classList.remove("valid"),e.textContent=function(t){const e=t.value.trim();if(e&&"file"===t.type&&t.hasAttribute("accept")&&!function(t){const e=t.getAttribute("accept");if(!e||!e.trim())return!0;const a=e.split(",").map((t=>t.trim().toLowerCase())),n=t.files;if(!n.length)return!0;for(const t of n){const e=t.type.toLowerCase(),n=t.name.toLowerCase();if(!a.some((t=>t.startsWith(".")?n.endsWith(t):t.endsWith("/*")?e.startsWith(t.slice(0,-1)):e===t)))return!1}return!0}(t))return t.getAttribute("data-accept-err")||"Invalid file type.";if(t.hasAttribute("data-confirm"))return e&&!r(t)?t.getAttribute("data-confirm-err")||"Values do not match.":"";for(const[e,a]of Object.entries(n))if(t.validity[e])return t.getAttribute(a.attr)||a.default;return""}(t))}function s(t,e){t.checkValidity()&&0===t.querySelectorAll("[aria-invalid=true]").length?e.disabled=!1:e.disabled=!0}function d(t){t.disabled||(t instanceof HTMLInputElement||t instanceof HTMLTextAreaElement)&&t.readOnly||(t.value.trim()?r(t)&&t.validity.valid?function(t){t.setAttribute("aria-invalid","false");const e=i(t);e&&(e.classList.add("valid"),e.classList.remove("invalid"),e.textContent=t.getAttribute("data-success")||"")}(t):o(t):function(t){t.removeAttribute("aria-invalid");const e=i(t);e&&(e.classList.remove("invalid","valid"),e.textContent="")}(t))}function u(t){if(t.addEventListener("input",(()=>d(t))),t.hasAttribute("data-confirm")){const e=t.getAttribute("data-confirm");if(!e)return void console.warn("data-confirm attribute set without origin reference");const a=document.querySelector(e);if(!a)return void console.warn(`element not found for data-confirm=${e}`);a.addEventListener("input",(()=>d(t)))}}function l(t,e){["INPUT","BUTTON"].includes(e.tagName)&&"submit"===e.type?(s(t,e),t.addEventListener("input",(()=>s(t,e)))):console.warn("submission button expected to be of type input or button with type=submit")}document.addEventListener("DOMContentLoaded",(()=>{document.querySelectorAll("form[data-validate]").forEach((n=>{if(!t.has(n)){for(let t of n.elements)e.includes(t.tagName)&&!t.hasAttribute("data-ignore")&&a.some((e=>t.hasAttribute(e)))&&u(t),t.hasAttribute("data-submit")&&l(n,t);t.add(n)}}))}),{once:!0})})();