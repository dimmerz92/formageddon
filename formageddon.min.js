const Formageddon=(()=>{"use strict";const t=new WeakSet,e=["INPUT","TEXTAREA","SELECT"],a=["accept","min","max","step","minlength","maxlength","pattern","required","data-confirm"],r=["input","change","blur"],n={valueMissing:{attr:"data-required-err",default:"This field is required."},typeMismatch:{attr:"data-type-err",default:"The value is not the correct type."},patternMismatch:{attr:"data-pattern-err",default:"The value does not match the required pattern."},tooLong:{attr:"data-maxlength-err",default:"The value is too long."},tooShort:{attr:"data-minlength-err",default:"The value is too short."},rangeOverflow:{attr:"data-max-err",default:"The value is too large."},rangeUnderflow:{attr:"data-min-err",default:"The value is too small."},stepMismatch:{attr:"data-step-err",default:"The value does not match the step interval."},badInput:{attr:"data-type-err",default:"The input value is invalid."}};function i(t){const e=t.getAttribute("data-confirm");if(!e)return!0;const a=document.querySelector(e);return a?!t.required&&!t.value.trim()||t.value===a.value:(console.warn(`element not found for data-confirm=${e}`),!1)}function o(t){const e=t.getAttribute("aria-describedby");if(!e)return null;const a=document.getElementById(e);return a||console.warn(`element not found for aria-describedby="${e}"`),a}function s(t){t.setAttribute("aria-invalid","true");const e=o(t);e&&(e.classList.add("invalid"),e.classList.remove("valid"),e.textContent=function(t){const e=t.value.trim();if(e&&"file"===t.type&&t.hasAttribute("accept")&&!function(t){const e=t.getAttribute("accept");if(!e||!e.trim())return!0;const a=e.split(",").map((t=>t.trim().toLowerCase())),r=t.files;if(!r.length)return!0;for(const t of r){const e=t.type.toLowerCase(),r=t.name.toLowerCase();if(!a.some((t=>t.startsWith(".")?r.endsWith(t):t.endsWith("/*")?e.startsWith(t.slice(0,-1)):e===t)))return!1}return!0}(t))return t.getAttribute("data-accept-err")||"Invalid file type.";if(t.hasAttribute("data-confirm"))return e&&!i(t)?t.getAttribute("data-confirm-err")||"Values do not match.":"";for(const[e,a]of Object.entries(n))if(t.validity[e])return t.getAttribute(a.attr)||a.default;return""}(t))}function d(t){t.removeAttribute("aria-invalid");const e=o(t);e&&(e.classList.remove("invalid","valid"),e.textContent="")}function u(t,e){t.checkValidity()&&0===t.querySelectorAll("[aria-invalid=true]").length?e.disabled=!1:e.disabled=!0}function c(t){for(const a of t.target.elements)e.includes(a.tagName)&&d(a)}function l(t){t.disabled||(t instanceof HTMLInputElement||t instanceof HTMLTextAreaElement)&&t.readOnly||(i(t)&&t.validity.valid?t.value.trim()?function(t){t.setAttribute("aria-invalid","false");const e=o(t);e&&(e.classList.add("valid"),e.classList.remove("invalid"),e.textContent=t.getAttribute("data-success")||"")}(t):d(t):s(t))}function f(t){if(r.forEach((e=>t.addEventListener(e,(()=>l(t))))),t.hasAttribute("data-confirm")){const e=t.getAttribute("data-confirm");if(!e)return void console.warn("data-confirm attribute set without origin reference");const a=document.querySelector(e);if(!a)return void console.warn(`element not found for data-confirm=${e}`);r.forEach((e=>a.addEventListener(e,(()=>l(t)))))}}function m(t,e){["INPUT","BUTTON"].includes(e.tagName)&&"submit"===e.type?(u(t,e),r.forEach((a=>t.addEventListener(a,(()=>u(t,e)))))):console.warn("submission button expected to be of type input or button with type=submit")}function h(t){for(const r of t.elements)e.includes(r.tagName)&&!r.hasAttribute("data-ignore")&&a.some((t=>r.hasAttribute(t)))&&f(r),r.hasAttribute("data-submit")&&m(t,r),"reset"===r.type&&t.addEventListener("reset",(t=>c(t)))}const v=new MutationObserver(((t,a)=>{const r=new Set;for(const a of t)for(const t of a.addedNodes)t instanceof HTMLElement&&t.querySelectorAll("*").forEach((t=>{if("FORM"===t.tagName&&t.hasAttribute("data-validate"))r.add(t);else if(e.includes(t.tagName)){const e=t.closest?.("form");t&&t.hasAttribute("data-validate")&&r.add(e)}}));for(const t of r)h(t)}));return document.addEventListener("DOMContentLoaded",(()=>{document.querySelectorAll("form[data-validate]").forEach((e=>{t.has(e)||(h(e),t.add(e))})),v.observe(document.body,{childList:!0,subtree:!0})}),{once:!0}),{initForm:h}})();